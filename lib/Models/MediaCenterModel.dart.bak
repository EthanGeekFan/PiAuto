import 'dart:async';
import 'package:audio_service/audio_service.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:just_audio/just_audio.dart';
import 'package:pi_auto/Models/NeteaseCloudMusic.dart';
import 'package:pi_auto/main.dart';

class MusicPlayerTask extends BackgroundAudioTask {
  AudioPlayer player = new AudioPlayer();
  List<MediaItem> playlist = [];
  List<String> urlList = [];
  AudioProcessingState _skipState;
  StreamSubscription<PlaybackEvent> _eventSubscription;
  NeteaseCloudMusicModel api = neteaseCloudMusicModel;

  int get index => player.currentIndex;
  MediaItem get mediaItem => index == null
      ? null
      : playlist.length == 0
          ? null
          : playlist[index];

  Future<void> loadLibrary() async {
    // Default Daily recommended Songs:
    playlist = (await neteaseCloudMusicModel.fetchDailyRecommendedSongs())
        .map(
          (e) => MediaItem(
            id: e.id,
            title: e.name ?? "No Title",
            album: e.album.name ?? "",
            artist: e.artist.name ?? "Unknown Artist",
            artUri: e.album.picUrl,
            duration: e.duration,
          ),
        )
        .toList();

    onUpdateQueue(playlist);
  }

  Future<void> usePlaylist(String playlistId) async {
    playlist = (await neteaseCloudMusicModel.fetchPlaylistDetail(playlistId))
        .tracks
        .map(
      (e) {
        if (e.id == null) {
          return null;
        }
        return MediaItem(
          id: e.id,
          title: e.name ?? "No Title",
          album: e.album.name ?? "",
          artist: e.artist.name ?? "Unknown Artist",
          artUri: e.album.picUrl,
          duration: e.duration,
        );
      },
    ).toList();
    playlist.removeWhere((element) => element == null);
    // Load and broadcast the queue
    await updateQueueSource();
  }

  Future updateQueueSource() async {
    await updateUrlList();
    await AudioServiceBackground.setQueue(playlist);
    await setAudioSource(0);
    // print("setting source");
    // compute<int, void>(setAudioSource, 0).then((value) => print("processed"));
    // print("handle others first");
  }

  Future updateUrlList() async {
    print(playlist.length);
    var rawUrls = await api.parseSongsUrl(playlist.map((e) => e.id).toList());
    urlList = [];
    var corruptedIds = [];
    for (var i = 0; i < playlist.length; i++) {
      var newUrl = rawUrls[playlist[i].id];
      if (newUrl == null) {
        print("something wrong");
        corruptedIds.add(playlist[i].id);
      } else {
        urlList.add(newUrl);
      }
    }
    playlist.removeWhere((element) => corruptedIds.contains(element.id));
    print(urlList.length);
  }

  Future<void> setAudioSource(int index) async {
    await onPause();
    try {
      print("1: " + DateTime.now().toString());
      var sources = urlList.map((e) => AudioSource.uri(Uri.parse(e))).toList();
      print("2: " + DateTime.now().toString());
      await player.setAudioSource(
        ConcatenatingAudioSource(
          children: sources,
        ),
        initialIndex: index ?? 0,
        preload: false,
      );
      print("3: " + DateTime.now().toString());
      onPlay();
    } catch (e) {
      print("Error: $e");
      // onStop();
    }
  }

  @override
  Future<void> onStart(Map<String, dynamic> params) async {
    // Broadcast media item changes.
    player.currentIndexStream.listen((index) {
      if (index != null) {
        AudioServiceBackground.setMediaItem(playlist[index]);
      }
    });
    // Propagate all events from the audio player to AudioService clients.
    _eventSubscription = player.playbackEventStream.listen((event) {
      _broadcastState();
    });
    // Special processing for state transitions.
    player.processingStateStream.listen((state) {
      switch (state) {
        case ProcessingState.completed:
          // In this example, the service stops when reaching the end.
          // onStop();
          break;
        case ProcessingState.ready:
          // If we just came from skipping between tracks, clear the skip
          // state now that we're ready to play.
          _skipState = null;
          onPlay();
          break;
        default:
          break;
      }
    });
    await loadLibrary();
  }

  @override
  Future<void> onUpdateQueue(List<MediaItem> queue) async {
    this.playlist = queue;
    print(playlist.length);
    // Load and broadcast the queue
    await updateQueueSource();
  }

  @override
  Future<void> onSkipToQueueItem(String mediaId) async {
    // Then default implementations of onSkipToNext and onSkipToPrevious will
    // delegate to this method.
    onPlay();
    final newIndex = playlist.indexWhere((item) => item.id == mediaId);
    if (newIndex == -1) return;
    // During a skip, the player may enter the buffering state. We could just
    // propagate that state directly to AudioService clients but AudioService
    // has some more specific states we could use for skipping to next and
    // previous. This variable holds the preferred state to send instead of
    // buffering during a skip, and it is cleared as soon as the player exits
    // buffering (see the listener in onStart).
    _skipState = newIndex > index
        ? AudioProcessingState.skippingToNext
        : AudioProcessingState.skippingToPrevious;
    // This jumps to the beginning of the queue item at newIndex.
    player.seek(Duration.zero, index: newIndex);
    // Demonstrate custom events.
    // AudioServiceBackground.sendCustomEvent('skip to $newIndex');
  }

  @override
  Future<void> onPlay() async {
    try {
      // check url
      var index = player.currentIndex;
      RegExp regExp = RegExp(r"\/(\d{14})\/");
      print(index);
      var url = urlList[index];
      print("good");
      var timeStr = regExp.firstMatch(url).group(0);
      if (timeStr != null) {
        var rawDateTime = timeStr.replaceAll("\/", "");
        var date = [
          rawDateTime.substring(0, 4),
          rawDateTime.substring(4, 6),
          rawDateTime.substring(6, 8)
        ].join('-');
        var time = [
          rawDateTime.substring(8, 10),
          rawDateTime.substring(10, 12),
          rawDateTime.substring(12, 14)
        ].join(':');
        DateTime expire = DateTime.tryParse([date, time].join('T'));
        print(expire);
        if (expire.isBefore(DateTime.now())) {
          // replace urls of songs after this index (include)
          var candidates = playlist.sublist(index);
          var updatePool =
              await api.parseSongsUrl(candidates.map((e) => e.id).toList());
          List<String> updateList = [];
          for (var i = 0; i < updatePool.length; i++) {
            updateList.add(updatePool[candidates[i].id]);
          }
          urlList.replaceRange(index, urlList.length, updateList);
          setAudioSource(0);
        }
        print('4: ' + DateTime.now().toString());
      } else {
        print("no match");
      }
      player.play();
    } catch (e) {
      print("Catch " + e.toString());
    }
  }

  @override
  Future<void> onPause() => player.pause();

  @override
  Future<void> onSeekTo(Duration position) => player.seek(position);

  @override
  Future<void> onSkipToNext() => player.seekToNext();

  @override
  Future<void> onSkipToPrevious() => player.seekToPrevious();

  @override
  Future<void> onSetShuffleMode(AudioServiceShuffleMode shuffleMode) async {
    if (shuffleMode == AudioServiceShuffleMode.none) {
      await player.setShuffleModeEnabled(false);
    } else {
      await player.setShuffleModeEnabled(true);
    }
  }

  @override
  Future<void> onSetRepeatMode(AudioServiceRepeatMode repeatMode) async {
    if (repeatMode == AudioServiceRepeatMode.none) {
      await player.setLoopMode(LoopMode.off);
    } else if (repeatMode == AudioServiceRepeatMode.one) {
      await player.setLoopMode(LoopMode.one);
    } else {
      await player.setLoopMode(LoopMode.all);
    }
  }

  @override
  Future<void> onStop() async {
    await player.dispose();
    _eventSubscription.cancel();
    // It is important to wait for this state to be broadcast before we shut
    // down the task. If we don't, the background task will be destroyed before
    // the message gets sent to the UI.
    await _broadcastState();
    // Shut down this task
    await super.onStop();
  }

  Future<void> _broadcastState() async {
    await AudioServiceBackground.setState(
      controls: [
        MediaControl.skipToPrevious,
        if (player.playing) MediaControl.pause else MediaControl.play,
        MediaControl.stop,
        MediaControl.skipToNext,
      ],
      systemActions: [
        MediaAction.seekTo,
        MediaAction.seekForward,
        MediaAction.seekBackward,
      ],
      androidCompactActions: [0, 1, 3],
      processingState: _getProcessingState(),
      playing: player.playing,
      position: player.position,
      bufferedPosition: player.bufferedPosition,
      speed: player.speed,
    );
  }

  AudioProcessingState _getProcessingState() {
    if (_skipState != null) return _skipState;
    switch (player.processingState) {
      case ProcessingState.idle:
        return AudioProcessingState.stopped;
      case ProcessingState.loading:
        return AudioProcessingState.connecting;
      case ProcessingState.buffering:
        return AudioProcessingState.buffering;
      case ProcessingState.ready:
        return AudioProcessingState.ready;
      case ProcessingState.completed:
        return AudioProcessingState.completed;
      default:
        throw Exception("Invalid state: ${player.processingState}");
    }
  }
}

enum MyPlayMode {
  loopOne,
  loopAll,
  shuffle,
}

class MyPlaylist {
  List<MediaItem> _playlist = [];
  int _currentIndex = 0;
  MyPlayMode mode = MyPlayMode.loopAll;

  void setPlaylist(List<MediaItem> playlist) {
    _playlist = playlist;
  }

  void addAll(List<MediaItem> mediaItems) {
    _playlist.addAll(mediaItems);
  }

  void add(MediaItem mediaItem) {
    _playlist.add(mediaItem);
  }

  void addNext(MediaItem mediaItem) {
    _playlist.insert(_currentIndex + 1, mediaItem);
  }

  void clearList() {
    _playlist.clear();
    _currentIndex = 0;
  }

  MediaItem removeAt(int rmIndex) {
    if (rmIndex >= 0) {
      // Found object
      if (rmIndex < _currentIndex) {
        _currentIndex -= 1;
      } else if (rmIndex == _currentIndex) {
        return null;
      }
      return _playlist.removeAt(rmIndex);
    } else {
      return null;
    }
  }

  bool remove(MediaItem mediaItem) {
    int rmIndex = _playlist.indexOf(mediaItem);
    if (rmIndex >= 0) {
      // Found object
      if (rmIndex < _currentIndex) {
        _currentIndex -= 1;
      } else if (rmIndex == _currentIndex) {
        return false;
      }
      return _playlist.remove(mediaItem);
    } else {
      return false;
    }
  }

  // Called by MusicPlayer
  MediaItem next() {
    if (this.hasNext()) {
      _currentIndex += 1;
      return _playlist[_currentIndex];
    } else {
      return null;
    }
  }

  // Called by MusicPlayer
  MediaItem previous() {
    if (this.hasPrevious()) {
      _currentIndex -= 1;
      return _playlist[_currentIndex];
    } else {
      return null;
    }
  }

  MediaItem current() {
    if (_currentIndex >= 0 && _currentIndex < _playlist.length) {
      return _playlist[_currentIndex];
    } else {
      return null;
    }
  }

  bool hasPrevious() {
    return _currentIndex > 0 && _currentIndex < _playlist.length;
  }

  bool hasNext() {
    return _currentIndex < _playlist.length - 1 && _currentIndex >= 0;
  }
}
