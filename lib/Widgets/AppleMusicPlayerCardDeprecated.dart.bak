import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:pi_auto/Models/MediaCenterModelDeprecated.dart';
import 'package:provider/provider.dart';
import 'package:volume_watcher/volume_watcher.dart';

class AppleMusicPlayerCard extends StatefulWidget {
  @override
  _AppleMusicPlayerCardState createState() => _AppleMusicPlayerCardState();
}

class _AppleMusicPlayerCardState extends State<AppleMusicPlayerCard> {
  Duration songDuration;
  double _volume = 0;
  double _maxVolume = 1;

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    initPlatformState();
  }

  // Platform messages are asynchronous, so we initialize in an async method.
  Future<void> initPlatformState() async {
    String platformVersion;

    // Platform messages may fail, so we use a try/catch PlatformException.
    try {
      VolumeWatcher.hideVolumeView = false;
      platformVersion = await VolumeWatcher.platformVersion;
    } on PlatformException {
      platformVersion = 'Failed to get platform version.';
    }

    double initVolume;
    double maxVolume;
    try {
      initVolume = await VolumeWatcher.getCurrentVolume;
      maxVolume = await VolumeWatcher.getMaxVolume;
    } on PlatformException {
      platformVersion = 'Failed to get volume.';
    }

    // If the widget was removed from the tree while the asynchronous platform
    // message was in flight, we want to discard the reply rather than calling
    // setState to update our non-existent appearance.
    if (!mounted) return;

    setState(() {
      this._volume = initVolume;
      this._maxVolume = maxVolume;
    });
  }

  @override
  void dispose() {
    // TODO: implement dispose
    context.read<MusicPlayer>().player.release();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10.0),
        boxShadow: [
          BoxShadow(
            color: Colors.grey[300],
            blurRadius: 10.0,
            spreadRadius: 5.0,
          ),
        ],
      ),
      child: Center(
        child: SingleChildScrollView(
          child: Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10.0),
            child: Column(
              children: [
                Container(
                  padding: EdgeInsets.all(10.0),
                  child: Center(
                    child: Container(
                      child: context.watch<MusicPlayer>().nowPlaying != null &&
                              context
                                      .watch<MusicPlayer>()
                                      .nowPlaying
                                      .albumPicture !=
                                  null
                          ? Image.network(
                              context
                                  .watch<MusicPlayer>()
                                  .nowPlaying
                                  .albumPicture,
                              errorBuilder: (context, exception, stacktrace) {
                                print(exception);
                                return Container();
                              },
                            )
                          : Container(),
                      height: 200,
                      width: 200,
                      clipBehavior: Clip.antiAlias,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10.0),
                        color: Colors.grey,
                        boxShadow: <BoxShadow>[
                          BoxShadow(
                            offset: Offset(0, 10),
                            color: Colors.grey[200],
                            spreadRadius: 10.0,
                            blurRadius: 20.0,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Flexible(
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            context.watch<MusicPlayer>().nowPlaying?.name ?? "",
                            overflow: TextOverflow.ellipsis,
                            maxLines: 1,
                            style: TextStyle(
                              fontSize: 20,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          Text(
                            context.watch<MusicPlayer>().nowPlaying?.author ??
                                "",
                            style: TextStyle(
                              fontSize: 20,
                              color: Colors.pink,
                              fontWeight: FontWeight.w400,
                            ),
                          ),
                        ],
                      ),
                    ),
                    SizedBox(
                      width: 40.0,
                    ),
                    Center(
                      child: IconButton(
                        splashColor: Colors.pink,
                        padding: EdgeInsets.zero,
                        icon: Icon(
                          CupertinoIcons.ellipsis,
                          color: Colors.pinkAccent,
                        ),
                        onPressed: () {
                          print('hell0');
                        },
                      ),
                    ),
                  ],
                ),
                StreamBuilder<Duration>(
                  stream: context.watch<MusicPlayer>().player.onDurationChanged,
                  builder: (context, durationSnapshot) {
                    return StreamBuilder<Duration>(
                        stream: context
                            .watch<MusicPlayer>()
                            .player
                            .onAudioPositionChanged,
                        builder: (context, positionSnapshot) {
                          return StreamBuilder<void>(
                              stream: context
                                  .watch<MusicPlayer>()
                                  .player
                                  .onSeekComplete,
                              builder: (context, _) {
                                return Column(
                                  children: [
                                    SliderTheme(
                                      data: SliderTheme.of(context).copyWith(
                                        inactiveTrackColor: Colors.grey[500],
                                        activeTrackColor: Colors.grey[600],
                                        trackHeight: 3.0,
                                        trackShape: CustomSliderTrackShape(),
                                        thumbColor: Colors.grey[600],
                                        thumbShape: RoundSliderThumbShape(
                                            enabledThumbRadius: 5.0),
                                      ),
                                      child: Slider(
                                        min: 0.0,
                                        value: (positionSnapshot
                                                    ?.data?.inMilliseconds ??
                                                0.0)
                                            ?.toDouble(),
                                        max: durationSnapshot
                                                ?.data?.inMilliseconds
                                                ?.toDouble() ??
                                            0.0,
                                        onChanged: (position) {
                                          if (!durationSnapshot.hasData) {
                                            return;
                                          }
                                          context
                                              .read<MusicPlayer>()
                                              .player
                                              .seek(
                                                Duration(
                                                  milliseconds:
                                                      position.toInt(),
                                                ),
                                              );
                                        },
                                      ),
                                    ),
                                    Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Text(
                                          positionSnapshot?.data
                                                  ?.toString()
                                                  ?.split('.')
                                                  ?.first ??
                                              "0:00:00",
                                          style: TextStyle(
                                            fontWeight: FontWeight.w600,
                                            color: Colors.grey[600],
                                          ),
                                        ),
                                        Text(
                                          durationSnapshot?.data
                                                  ?.toString()
                                                  ?.split('.')
                                                  ?.first ??
                                              "-:--:--",
                                          style: TextStyle(
                                            fontWeight: FontWeight.w600,
                                            color: Colors.grey[600],
                                          ),
                                        ),
                                      ],
                                    )
                                  ],
                                );
                              });
                        });
                  },
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 30.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      IconButton(
                        iconSize: 50,
                        icon: Icon(
                          CupertinoIcons.backward_fill,
                        ),
                        onPressed: context.read<MusicPlayer>().hasPrev()
                            ? () {
                                setState(() {
                                  context.read<MusicPlayer>().prev();
                                });
                              }
                            : null,
                      ),
                      StreamBuilder<AudioPlayerState>(
                          stream: context
                              .watch<MusicPlayer>()
                              .player
                              .onPlayerStateChanged,
                          builder: (context, snapshot) {
                            bool enabled = true;
                            if (!snapshot.hasData) {
                              enabled = false;
                            }
                            if (snapshot.hasError) {
                              enabled = false;
                            }
                            return IconButton(
                              iconSize: 50,
                              icon: Icon(
                                enabled
                                    ? snapshot.data != AudioPlayerState.PAUSED
                                        ? CupertinoIcons.pause_fill
                                        : CupertinoIcons.play_fill
                                    : CupertinoIcons.play_fill,
                              ),
                              onPressed: () {
                                setState(() {
                                  context.read<MusicPlayer>().play();
                                });
                              },
                            );
                          }),
                      IconButton(
                        iconSize: 50,
                        icon: Icon(
                          CupertinoIcons.forward_fill,
                        ),
                        onPressed: context.read<MusicPlayer>().hasNext()
                            ? () {
                                setState(() {
                                  context.read<MusicPlayer>().next();
                                });
                              }
                            : null,
                      )
                    ],
                  ),
                ),
                Row(
                  mainAxisSize: MainAxisSize.max,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    VolumeWatcher(
                      onVolumeChangeListener: (double volume) {
                        setState(() {
                          _volume = volume;
                        });
                      },
                    ),
                    Icon(
                      CupertinoIcons.speaker_fill,
                      color: Colors.grey[600],
                      size: 15,
                    ),
                    Flexible(
                      child: Slider.adaptive(
                        min: 0.0,
                        max: 1.0,
                        value: _volume / _maxVolume,
                        onChanged: (volume) {
                          setState(() {
                            _volume = volume;
                            VolumeWatcher.setVolume(_maxVolume * volume).then(
                              (value) => print(value),
                            );
                          });
                        },
                      ),
                    ),
                    Icon(
                      CupertinoIcons.speaker_3_fill,
                      color: Colors.grey[600],
                      size: 15,
                    ),
                  ],
                )
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class CustomSliderTrackShape extends RoundedRectSliderTrackShape {
  Rect getPreferredRect({
    @required RenderBox parentBox,
    Offset offset = Offset.zero,
    @required SliderThemeData sliderTheme,
    bool isEnabled = false,
    bool isDiscrete = false,
  }) {
    final double trackHeight = sliderTheme.trackHeight;
    final double trackLeft = offset.dx;
    final double trackTop =
        offset.dy + (parentBox.size.height - trackHeight) / 2;
    final double trackWidth = parentBox.size.width;
    return Rect.fromLTWH(trackLeft, trackTop, trackWidth, trackHeight);
  }
}
